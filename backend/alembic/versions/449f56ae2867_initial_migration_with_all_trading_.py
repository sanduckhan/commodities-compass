"""Initial migration with all trading models

Revision ID: 449f56ae2867
Revises:
Create Date: 2025-08-03 17:27:57.663273

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "449f56ae2867"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "config",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "parameter",
            sa.VARCHAR(length=100),
            nullable=True,
            comment="Name of the configuration parameter",
        ),
        sa.Column(
            "indicator",
            sa.VARCHAR(length=100),
            nullable=True,
            comment="Which indicator this parameter applies to (RSI, MACD, etc.)",
        ),
        sa.Column(
            "val_min",
            sa.DECIMAL(precision=15, scale=6),
            nullable=True,
            comment="Minimum allowed value for this parameter",
        ),
        sa.Column(
            "val_max",
            sa.DECIMAL(precision=15, scale=6),
            nullable=True,
            comment="Maximum allowed value for this parameter",
        ),
        sa.Column(
            "step",
            sa.DECIMAL(precision=15, scale=6),
            nullable=True,
            comment="Step size for parameter optimization",
        ),
        sa.Column(
            "current",
            sa.DECIMAL(precision=15, scale=6),
            nullable=True,
            comment="Current active value being used",
        ),
        sa.Column(
            "new_champion",
            sa.DECIMAL(precision=15, scale=6),
            nullable=True,
            comment="New optimal value found through backtesting/optimization",
        ),
        sa.Column(
            "test",
            sa.DECIMAL(precision=15, scale=6),
            nullable=True,
            comment="Test value being evaluated",
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("parameter"),
    )
    op.create_table(
        "indicator",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "date",
            sa.TIMESTAMP(),
            nullable=False,
            comment="Date for this indicator calculation (synchronized with technicals.timestamp)",
        ),
        sa.Column(
            "commodity_symbol",
            sa.VARCHAR(length=10),
            nullable=False,
            comment="Commodity symbol (CC for Cocoa)",
        ),
        sa.Column(
            "rsi_score",
            sa.DECIMAL(precision=4, scale=2),
            nullable=True,
            comment="Individual score for RSI indicator (-6 to +6 scale)",
        ),
        sa.Column(
            "macd_score",
            sa.DECIMAL(precision=4, scale=2),
            nullable=True,
            comment="Individual score for MACD indicator (-6 to +6 scale)",
        ),
        sa.Column(
            "stochastic_score",
            sa.DECIMAL(precision=4, scale=2),
            nullable=True,
            comment="Individual score for Stochastic oscillator (-6 to +6 scale)",
        ),
        sa.Column(
            "atr_score",
            sa.DECIMAL(precision=4, scale=2),
            nullable=True,
            comment="Individual score for ATR (volatility measure) (-6 to +6 scale)",
        ),
        sa.Column(
            "close_pivot",
            sa.DECIMAL(precision=15, scale=6),
            nullable=False,
            comment="Close/Pivot ratio score - position relative to pivot point",
        ),
        sa.Column(
            "volume_oi",
            sa.DECIMAL(precision=15, scale=6),
            nullable=True,
            comment="Volume/Open Interest ratio score",
        ),
        sa.Column(
            "rsi_norm",
            sa.DECIMAL(precision=15, scale=6),
            nullable=True,
            comment="RSI normalized to 0-1 scale for comparison",
        ),
        sa.Column(
            "macd_norm",
            sa.DECIMAL(precision=15, scale=6),
            nullable=True,
            comment="MACD normalized to 0-1 scale for comparison",
        ),
        sa.Column(
            "stoch_k_norm",
            sa.DECIMAL(precision=15, scale=6),
            nullable=True,
            comment="Stochastic %K normalized to 0-1 scale",
        ),
        sa.Column(
            "atr_norm",
            sa.DECIMAL(precision=15, scale=6),
            nullable=True,
            comment="ATR normalized to 0-1 scale",
        ),
        sa.Column(
            "close_pivot_norm",
            sa.DECIMAL(precision=15, scale=6),
            nullable=False,
            comment="Close/Pivot ratio normalized to 0-1 scale",
        ),
        sa.Column(
            "vol_oi_norm",
            sa.DECIMAL(precision=15, scale=6),
            nullable=True,
            comment="Volume/OI ratio normalized to 0-1 scale",
        ),
        sa.Column(
            "indicator",
            sa.DECIMAL(precision=15, scale=6),
            nullable=True,
            comment="Combined technical indicator score - weighted average of normalized indicators",
        ),
        sa.Column(
            "momentum",
            sa.DECIMAL(precision=15, scale=6),
            nullable=True,
            comment="Momentum score - combination of trend-following indicators",
        ),
        sa.Column(
            "macroeco_bonus",
            sa.DECIMAL(precision=15, scale=6),
            nullable=False,
            comment="Macroeconomic bonus/penalty applied to technical signals",
        ),
        sa.Column(
            "final_indicator",
            sa.DECIMAL(precision=15, scale=6),
            nullable=True,
            comment="Final combined indicator including technical + macroeconomic factors",
        ),
        sa.Column(
            "macroeco_score",
            sa.DECIMAL(precision=4, scale=2),
            nullable=True,
            comment="OpenAI-generated macroeconomic score: 0.9, 1.0, or 1.1",
        ),
        sa.Column(
            "eco",
            sa.TEXT(),
            nullable=False,
            comment="Macroeconomic analysis text/description generated by OpenAI",
        ),
        sa.Column(
            "final_indicator_previous",
            sa.DECIMAL(precision=15, scale=6),
            nullable=True,
            comment="Previous period's final indicator value",
        ),
        sa.Column(
            "previous_macroeco",
            sa.DECIMAL(precision=15, scale=6),
            nullable=True,
            comment="Previous period's macroeconomic score",
        ),
        sa.Column(
            "previous_rsi",
            sa.DECIMAL(precision=15, scale=6),
            nullable=True,
            comment="Previous period's RSI value",
        ),
        sa.Column(
            "previous_macd",
            sa.DECIMAL(precision=15, scale=6),
            nullable=True,
            comment="Previous period's MACD value",
        ),
        sa.Column(
            "previous_k",
            sa.DECIMAL(precision=15, scale=6),
            nullable=True,
            comment="Previous period's Stochastic %K value",
        ),
        sa.Column(
            "previous_atr",
            sa.DECIMAL(precision=15, scale=6),
            nullable=True,
            comment="Previous period's ATR value",
        ),
        sa.Column(
            "previous_close_pivot",
            sa.DECIMAL(precision=15, scale=6),
            nullable=True,
            comment="Previous period's Close/Pivot ratio",
        ),
        sa.Column(
            "previous_vol_oi",
            sa.DECIMAL(precision=15, scale=6),
            nullable=True,
            comment="Previous period's Volume/OI ratio",
        ),
        sa.Column(
            "conclusion",
            sa.VARCHAR(length=100),
            nullable=True,
            comment="Current period's trading conclusion/recommendation",
        ),
        sa.Column(
            "previous_conclusion",
            sa.VARCHAR(length=100),
            nullable=True,
            comment="Previous period's trading conclusion for comparison",
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_indicator_commodity_symbol"),
        "indicator",
        ["commodity_symbol"],
        unique=False,
    )
    op.create_index(op.f("ix_indicator_date"), "indicator", ["date"], unique=False)
    op.create_table(
        "market_research",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "date",
            sa.TIMESTAMP(),
            nullable=False,
            comment="Publication or analysis date of the research",
        ),
        sa.Column(
            "author",
            sa.VARCHAR(length=100),
            nullable=False,
            comment="Author or source of the research/publication",
        ),
        sa.Column(
            "summary",
            sa.TEXT(),
            nullable=False,
            comment="Summary or abstract of the research content",
        ),
        sa.Column(
            "keywords",
            sa.TEXT(),
            nullable=True,
            comment="Keywords or tags associated with this research",
        ),
        sa.Column(
            "impact_synthesis",
            sa.TEXT(),
            nullable=False,
            comment="Synthesized market impact assessment - how this research affects trading decisions",
        ),
        sa.Column(
            "date_text",
            sa.VARCHAR(length=100),
            nullable=False,
            comment="Date in text format (might include additional context like 'Q1 2024')",
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_market_research_date"), "market_research", ["date"], unique=False
    )
    op.create_table(
        "performance_tracking",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "performance",
            sa.VARCHAR(length=100),
            nullable=False,
            comment="Performance metric name (ROI, Sharpe ratio, Win rate, etc.)",
        ),
        sa.Column(
            "current",
            sa.DECIMAL(precision=15, scale=6),
            nullable=False,
            comment="Current performance value",
        ),
        sa.Column(
            "new",
            sa.DECIMAL(precision=15, scale=6),
            nullable=False,
            comment="New/improved performance value",
        ),
        sa.Column(
            "limit",
            sa.VARCHAR(length=100),
            nullable=False,
            comment="Minimum score tested with Colab calculator (https://colab.research.google.com/drive/1EwQYZ7TtyhsaAArECwsGfyDkqREKbndd) - performance threshold",
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "podcast",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "date",
            sa.TIMESTAMP(),
            nullable=False,
            comment="Date of the podcast/summary compilation",
        ),
        sa.Column(
            "conclusion",
            sa.TEXT(),
            nullable=False,
            comment="Overall market conclusion and trading recommendation",
        ),
        sa.Column(
            "meteo_date",
            sa.TIMESTAMP(),
            nullable=False,
            comment="Date of the weather data used in this summary",
        ),
        sa.Column(
            "meteo_conclusion",
            sa.TEXT(),
            nullable=False,
            comment="Weather-related market impact conclusion",
        ),
        sa.Column(
            "press_date",
            sa.TIMESTAMP(),
            nullable=False,
            comment="Date of the press/news data used",
        ),
        sa.Column(
            "press_author",
            sa.VARCHAR(length=100),
            nullable=False,
            comment="Author or source of the press information",
        ),
        sa.Column(
            "press_text",
            sa.TEXT(),
            nullable=False,
            comment="Press/news content summary",
        ),
        sa.Column(
            "position",
            sa.VARCHAR(length=100),
            nullable=False,
            comment="Recommended trading position (LONG/SHORT/NEUTRAL)",
        ),
        sa.Column(
            "dialogue",
            sa.TEXT(),
            nullable=False,
            comment="Podcast dialogue or script content",
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_podcast_date"), "podcast", ["date"], unique=False)
    op.create_table(
        "technicals",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "timestamp",
            sa.TIMESTAMP(),
            nullable=False,
            comment="Date and time of the trading period (daily frequency)",
        ),
        sa.Column(
            "commodity_symbol",
            sa.VARCHAR(length=10),
            nullable=False,
            comment="Commodity symbol (CC for Cocoa, expandable for other commodities)",
        ),
        sa.Column(
            "close",
            sa.DECIMAL(precision=15, scale=6),
            nullable=False,
            comment="Closing price of the commodity for this period",
        ),
        sa.Column(
            "high",
            sa.DECIMAL(precision=15, scale=6),
            nullable=False,
            comment="Highest price during this trading period",
        ),
        sa.Column(
            "low",
            sa.DECIMAL(precision=15, scale=6),
            nullable=False,
            comment="Lowest price during this trading period",
        ),
        sa.Column(
            "volume",
            sa.INTEGER(),
            nullable=False,
            comment="Trading volume - number of contracts/units traded",
        ),
        sa.Column(
            "open_interest",
            sa.INTEGER(),
            nullable=False,
            comment="Open interest - total number of outstanding derivative contracts",
        ),
        sa.Column(
            "implied_volatility",
            sa.DECIMAL(precision=15, scale=6),
            nullable=True,
            comment="Implied volatility derived from options pricing",
        ),
        sa.Column(
            "stock_us",
            sa.DECIMAL(precision=15, scale=6),
            nullable=True,
            comment="US stock values regulated by ICE, available daily online, expressed in bags (x70/1000 to convert to kgs)",
        ),
        sa.Column(
            "com_net_us",
            sa.DECIMAL(precision=15, scale=6),
            nullable=True,
            comment="Net commercial positions from COT (Commitments of Traders) report - commercial long minus short positions",
        ),
        sa.Column(
            "r3",
            sa.DECIMAL(precision=15, scale=6),
            nullable=False,
            comment="Resistance level 3 - strongest resistance",
        ),
        sa.Column(
            "r2",
            sa.DECIMAL(precision=15, scale=6),
            nullable=False,
            comment="Resistance level 2 - intermediate resistance",
        ),
        sa.Column(
            "r1",
            sa.DECIMAL(precision=15, scale=6),
            nullable=False,
            comment="Resistance level 1 - nearest resistance above pivot",
        ),
        sa.Column(
            "pivot",
            sa.DECIMAL(precision=15, scale=6),
            nullable=False,
            comment="Central pivot point - key support/resistance level",
        ),
        sa.Column(
            "s1",
            sa.DECIMAL(precision=15, scale=6),
            nullable=False,
            comment="Support level 1 - nearest support below pivot",
        ),
        sa.Column(
            "s2",
            sa.DECIMAL(precision=15, scale=6),
            nullable=False,
            comment="Support level 2 - intermediate support",
        ),
        sa.Column(
            "s3",
            sa.DECIMAL(precision=15, scale=6),
            nullable=False,
            comment="Support level 3 - strongest support",
        ),
        sa.Column(
            "ema12",
            sa.DECIMAL(precision=15, scale=6),
            nullable=False,
            comment="12-period Exponential Moving Average",
        ),
        sa.Column(
            "ema26",
            sa.DECIMAL(precision=15, scale=6),
            nullable=False,
            comment="26-period Exponential Moving Average",
        ),
        sa.Column(
            "macd",
            sa.DECIMAL(precision=15, scale=6),
            nullable=False,
            comment="MACD line (EMA12 - EMA26) - trend following momentum indicator",
        ),
        sa.Column(
            "signal",
            sa.DECIMAL(precision=15, scale=6),
            nullable=True,
            comment="MACD Signal line (EMA of MACD) - generates buy/sell signals",
        ),
        sa.Column(
            "rsi_14d",
            sa.DECIMAL(precision=15, scale=6),
            nullable=True,
            comment="14-day Relative Strength Index (0-100) - momentum oscillator",
        ),
        sa.Column(
            "stochastic_k_14",
            sa.DECIMAL(precision=15, scale=6),
            nullable=True,
            comment="14-period Stochastic %K - fast stochastic oscillator",
        ),
        sa.Column(
            "stochastic_d_14",
            sa.DECIMAL(precision=15, scale=6),
            nullable=True,
            comment="14-period Stochastic %D - slow stochastic (SMA of %K)",
        ),
        sa.Column(
            "atr",
            sa.DECIMAL(precision=15, scale=6),
            nullable=True,
            comment="Average True Range - different period than ATR 14d",
        ),
        sa.Column(
            "atr_14d",
            sa.DECIMAL(precision=15, scale=6),
            nullable=True,
            comment="14-day Average True Range - calculated from formulas, converted to numerical",
        ),
        sa.Column(
            "volatility",
            sa.DECIMAL(precision=15, scale=6),
            nullable=True,
            comment="General volatility measure (calculation method needs clarification)",
        ),
        sa.Column(
            "bollinger",
            sa.DECIMAL(precision=15, scale=6),
            nullable=False,
            comment="Bollinger Band middle line (typically 20-period SMA)",
        ),
        sa.Column(
            "bollinger_upper",
            sa.DECIMAL(precision=15, scale=6),
            nullable=False,
            comment="Bollinger Band upper band (middle + 2*standard deviation)",
        ),
        sa.Column(
            "bollinger_lower",
            sa.DECIMAL(precision=15, scale=6),
            nullable=False,
            comment="Bollinger Band lower band (middle - 2*standard deviation)",
        ),
        sa.Column(
            "bollinger_width",
            sa.DECIMAL(precision=15, scale=6),
            nullable=False,
            comment="Bollinger Band width (limites de bolinger) - difference between upper and lower bands",
        ),
        sa.Column(
            "close_pivot_ratio",
            sa.DECIMAL(precision=15, scale=6),
            nullable=True,
            comment="Ratio of close price to pivot point - position relative to pivot",
        ),
        sa.Column(
            "volume_oi_ratio",
            sa.DECIMAL(precision=15, scale=6),
            nullable=False,
            comment="Volume to Open Interest ratio (Volume / Open Interest) - liquidity indicator",
        ),
        sa.Column(
            "gain_14d",
            sa.DECIMAL(precision=15, scale=6),
            nullable=True,
            comment="14-day average gain - calculated from formulas, converted to numerical for RSI calculation",
        ),
        sa.Column(
            "loss_14d",
            sa.DECIMAL(precision=15, scale=6),
            nullable=True,
            comment="14-day average loss - calculated from formulas, converted to numerical for RSI calculation",
        ),
        sa.Column(
            "rs",
            sa.DECIMAL(precision=15, scale=6),
            nullable=True,
            comment="Relative Strength (gain/loss ratio) - component of RSI",
        ),
        sa.Column(
            "decision",
            sa.VARCHAR(length=100),
            nullable=True,
            comment="Trading decision: OPEN, HEDGE, or MONITOR",
        ),
        sa.Column(
            "confidence",
            sa.DECIMAL(precision=5, scale=2),
            nullable=True,
            comment="Confidence level in the trading decision as percentage (0-100%)",
        ),
        sa.Column(
            "direction",
            sa.VARCHAR(length=100),
            nullable=True,
            comment="Expected price direction: BULLISH or BEARISH",
        ),
        sa.Column(
            "score",
            sa.TEXT(),
            nullable=True,
            comment="Structured data containing composite trading score calculations",
        ),
        sa.Column(
            "conclusion",
            sa.DECIMAL(precision=15, scale=6),
            nullable=True,
            comment="Final numerical conclusion/score for this period",
        ),
        sa.Column(
            "row_number",
            sa.INTEGER(),
            nullable=False,
            comment="Original row number from Excel sheet for reference",
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Record creation timestamp",
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Record last update timestamp",
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_technicals_commodity_symbol"),
        "technicals",
        ["commodity_symbol"],
        unique=False,
    )
    op.create_index(
        op.f("ix_technicals_timestamp"), "technicals", ["timestamp"], unique=False
    )
    op.create_table(
        "weather_data",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "date",
            sa.TIMESTAMP(),
            nullable=False,
            comment="Date of the weather report or agricultural update",
        ),
        sa.Column(
            "text",
            sa.TEXT(),
            nullable=False,
            comment="Full text of the weather/agricultural report",
        ),
        sa.Column(
            "summary",
            sa.TEXT(),
            nullable=False,
            comment="Summary of key weather/agricultural conditions",
        ),
        sa.Column(
            "keywords",
            sa.VARCHAR(length=500),
            nullable=False,
            comment="Keywords describing weather conditions, crop types, regions affected",
        ),
        sa.Column(
            "impact_synthesis",
            sa.TEXT(),
            nullable=False,
            comment="Synthesized market impact - how weather conditions affect commodity prices",
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_weather_data_date"), "weather_data", ["date"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_weather_data_date"), table_name="weather_data")
    op.drop_table("weather_data")
    op.drop_index(op.f("ix_technicals_timestamp"), table_name="technicals")
    op.drop_index(op.f("ix_technicals_commodity_symbol"), table_name="technicals")
    op.drop_table("technicals")
    op.drop_index(op.f("ix_podcast_date"), table_name="podcast")
    op.drop_table("podcast")
    op.drop_table("performance_tracking")
    op.drop_index(op.f("ix_market_research_date"), table_name="market_research")
    op.drop_table("market_research")
    op.drop_index(op.f("ix_indicator_date"), table_name="indicator")
    op.drop_index(op.f("ix_indicator_commodity_symbol"), table_name="indicator")
    op.drop_table("indicator")
    op.drop_table("config")
    # ### end Alembic commands ###
