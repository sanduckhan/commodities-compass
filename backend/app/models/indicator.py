"""
Normalized indicators and trading signals model.
"""

from datetime import datetime
from decimal import Decimal
from typing import Optional

from sqlalchemy import DECIMAL, INTEGER, TEXT, TIMESTAMP, VARCHAR, func
from sqlalchemy.orm import Mapped, mapped_column

from .base import Base


class Indicator(Base):
    """
    Normalized indicators and final trading signals.

    This table contains processed and normalized versions of technical indicators,
    along with macroeconomic factors and final trading recommendations.
    Individual scores range from -6 to +6. Updated daily at 11 PM via Make.com automation.
    Historical data preservation is critical for algorithm testing.

    Source: INDICATOR sheet from Excel file
    """

    __tablename__ = "indicator"

    # Primary key and timestamp
    id: Mapped[int] = mapped_column(INTEGER, primary_key=True, autoincrement=True)
    date: Mapped[datetime] = mapped_column(
        TIMESTAMP,
        nullable=False,
        index=True,
        comment="Date for this indicator calculation (synchronized with technicals.timestamp)",
    )

    # Commodity identifier
    commodity_symbol: Mapped[str] = mapped_column(
        VARCHAR(10),
        nullable=False,
        default="CC",
        index=True,
        comment="Commodity symbol (CC for Cocoa)",
    )

    # === RAW INDICATOR SCORES (-6 to +6) ===
    # Individual scores for each technical indicator on -6 to +6 scale
    rsi_score: Mapped[Optional[Decimal]] = mapped_column(
        DECIMAL(8, 2),
        comment="Individual score for RSI indicator (extended range for actual data)",
    )
    macd_score: Mapped[Optional[Decimal]] = mapped_column(
        DECIMAL(8, 2),
        comment="Individual score for MACD indicator (extended range for actual data)",
    )
    stochastic_score: Mapped[Optional[Decimal]] = mapped_column(
        DECIMAL(8, 2),
        comment="Individual score for Stochastic oscillator (extended range for actual data)",
    )
    atr_score: Mapped[Optional[Decimal]] = mapped_column(
        DECIMAL(8, 2),
        comment="Individual score for ATR (volatility measure) (extended range for actual data)",
    )

    # === MARKET POSITION SCORES ===
    close_pivot: Mapped[Decimal] = mapped_column(
        DECIMAL(15, 6),
        nullable=False,
        comment="Close/Pivot ratio score - position relative to pivot point",
    )
    volume_oi: Mapped[Optional[Decimal]] = mapped_column(
        DECIMAL(15, 6), comment="Volume/Open Interest ratio score"
    )

    # === NORMALIZED INDICATORS (0-1 SCALE) ===
    # All technical indicators normalized to comparable scale
    rsi_norm: Mapped[Optional[Decimal]] = mapped_column(
        DECIMAL(15, 6), comment="RSI normalized to 0-1 scale for comparison"
    )
    macd_norm: Mapped[Optional[Decimal]] = mapped_column(
        DECIMAL(15, 6), comment="MACD normalized to 0-1 scale for comparison"
    )
    stoch_k_norm: Mapped[Optional[Decimal]] = mapped_column(
        DECIMAL(15, 6), comment="Stochastic %K normalized to 0-1 scale"
    )
    atr_norm: Mapped[Optional[Decimal]] = mapped_column(
        DECIMAL(15, 6), comment="ATR normalized to 0-1 scale"
    )
    close_pivot_norm: Mapped[Decimal] = mapped_column(
        DECIMAL(15, 6),
        nullable=False,
        comment="Close/Pivot ratio normalized to 0-1 scale",
    )
    vol_oi_norm: Mapped[Optional[Decimal]] = mapped_column(
        DECIMAL(15, 6), comment="Volume/OI ratio normalized to 0-1 scale"
    )

    # === COMPOSITE INDICATORS ===
    indicator: Mapped[Optional[Decimal]] = mapped_column(
        DECIMAL(15, 6),
        comment="Combined technical indicator score - weighted average of normalized indicators",
    )
    momentum: Mapped[Optional[Decimal]] = mapped_column(
        DECIMAL(15, 6),
        comment="Momentum score - combination of trend-following indicators",
    )
    macroeco_bonus: Mapped[Decimal] = mapped_column(
        DECIMAL(15, 6),
        nullable=False,
        comment="Macroeconomic bonus/penalty applied to technical signals",
    )
    final_indicator: Mapped[Optional[Decimal]] = mapped_column(
        DECIMAL(15, 6),
        comment="Final combined indicator including technical + macroeconomic factors",
    )

    # === MACROECONOMIC ANALYSIS ===
    macroeco_score: Mapped[Optional[Decimal]] = mapped_column(
        DECIMAL(8, 2),
        comment="OpenAI-generated macroeconomic score (extended range for actual data)",
    )
    eco: Mapped[str] = mapped_column(
        TEXT,
        nullable=False,
        comment="Macroeconomic analysis text/description generated by OpenAI",
    )

    # === LATEST VALUES FOR COMPARISON ===
    # These fields store the most recent values for trend analysis
    final_indicator_previous: Mapped[Optional[Decimal]] = mapped_column(
        DECIMAL(15, 6), comment="Previous period's final indicator value"
    )
    previous_macroeco: Mapped[Optional[Decimal]] = mapped_column(
        DECIMAL(15, 6), comment="Previous period's macroeconomic score"
    )
    previous_rsi: Mapped[Optional[Decimal]] = mapped_column(
        DECIMAL(15, 6), comment="Previous period's RSI value"
    )
    previous_macd: Mapped[Optional[Decimal]] = mapped_column(
        DECIMAL(15, 6), comment="Previous period's MACD value"
    )
    previous_k: Mapped[Optional[Decimal]] = mapped_column(
        DECIMAL(15, 6), comment="Previous period's Stochastic %K value"
    )
    previous_atr: Mapped[Optional[Decimal]] = mapped_column(
        DECIMAL(15, 6), comment="Previous period's ATR value"
    )
    previous_close_pivot: Mapped[Optional[Decimal]] = mapped_column(
        DECIMAL(15, 6), comment="Previous period's Close/Pivot ratio"
    )
    previous_vol_oi: Mapped[Optional[Decimal]] = mapped_column(
        DECIMAL(15, 6), comment="Previous period's Volume/OI ratio"
    )

    # === FINAL CONCLUSIONS ===
    conclusion: Mapped[Optional[str]] = mapped_column(
        VARCHAR(100), comment="Current period's trading conclusion/recommendation"
    )
    previous_conclusion: Mapped[Optional[str]] = mapped_column(
        VARCHAR(100), comment="Previous period's trading conclusion for comparison"
    )

    # === AUDIT FIELDS ===
    created_at: Mapped[datetime] = mapped_column(TIMESTAMP, server_default=func.now())
    updated_at: Mapped[datetime] = mapped_column(
        TIMESTAMP, server_default=func.now(), onupdate=func.now()
    )
